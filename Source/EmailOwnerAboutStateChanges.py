#! python3
""" Email owners of samples of any changes by others to sample status occurring today

Author: Wayne Schou
Date: August 2018

"""
from FreezerPro import send_html, dict_to_html, email_Support, get_users_by_fullname, get_users_by_username,\
    samples_with_state_changes, get_sample, SUPPORT_EMAIL


def email_owner_about_state_change(date_flag):
    sample_state_changes = samples_with_state_changes(date_flag)
    sample_state_changes.sort(key=lambda x: x['type']+x['sample_id']+x['date'])
    # remove state changes generated by owner of sample (sample has username, statechange uses fullname as user_name)
    modified_by = set([state_change['user_name'] for state_change in sample_state_changes])
    modifying_users = get_users_by_fullname(modified_by)
    for state_change in sample_state_changes[:]:
        modifying_user = next((user['username'] for user in modifying_users if user['fullname'] == state_change['user_name']), None)
        state_change["modified_by"] = modifying_user
    for state_change in sample_state_changes[:]:
        # print(state_change['date'], state_change['type'], 'for sample', state_change['sample_id'], 'by', state_change['user_name'])
        sample = get_sample(state_change['sample_id'])
        if (sample['owner'] == state_change['modified_by']):
            sample_state_changes.remove(state_change)
        else:
            #state_change['sample_name'] = sample['name']
            state_change['owner'] = sample['owner']
            state_change['sample_type'] = sample['sample_type']
            # vials = get_vials(state_change['sample_id'])

    affected_usernames = set([state_change['owner'] for state_change in sample_state_changes])
    owners = get_users_by_username(affected_usernames)
    for user in owners:
        user_state_changes = [state_change for state_change in sample_state_changes if state_change['owner'] == user['username']]
        msg = ['The state of the following samples owned by you has been changed by someone else:']

        html = dict_to_html(user_state_changes, 
                            ['date', 'sample_id', 'sample_type', 'vial_location', 'from_state', 'to_state', 'user_name', 'comments'],  
                            ['Date', 'Sample Id', 'Sample Type', 'Location', 'From State', 'To State', 'Changed by', 'Comments'])
        msg.append(html)
        #print(user['fullname'], '[', user['email'], ']')
        #print('\n'.join(msg))

        send_html(user['fullname'], [user['email']], 'SamplePro: Sample status was changed {}'.format(date_flag), '<br>\r\n'.join(msg))
    return owners


if __name__ == '__main__':
    try:
        owners = email_owner_about_state_change('today')  
        #owners = email_owner_about_state_change('yesterday')  
        # temp for testing      
        # owners = email_owner_about_state_change('7/8/2018,8/8/2018')
        print('Email sent to', owners)
    except Exception as err:
        # print(err)
        email_Support('SamplePro error in EmailOwnerAboutStateChanges', err )
